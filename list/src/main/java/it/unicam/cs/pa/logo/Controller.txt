package it.unicam.cs.pa.logo;

import it.unicam.cs.pa.logo.io.EnvironmentWriter;
import it.unicam.cs.pa.logo.io.TwoDimEnvWriter;
import it.unicam.cs.pa.logo.model.Coordinate;
import it.unicam.cs.pa.logo.model.Direction;
import it.unicam.cs.pa.logo.model.Environment;
import it.unicam.cs.pa.logo.model.defined.TwoDimCoordinate;
import it.unicam.cs.pa.logo.model.defined.TwoDimDirection;
import it.unicam.cs.pa.logo.model.defined.TwoDimEnvironment;

import java.io.File;
import java.io.IOException;
import java.util.function.Supplier;

/**
 * This class is used to control the activities around a GOL execution.
 */
public class Controller<C extends Coordinate, D extends Direction> {

    private final EnvironmentWriter<C, D> writer;
    //private final EnvironmentLoader<S, C> loader;

    private final Supplier<Environment<C, D>> environmentBuilder;

    //private final Rule<S> rules;

    private Environment<C, D> currentField;

    //private LinkedList<Environment<S, C>> history;

    public static Controller<TwoDimCoordinate, TwoDimDirection> getTwoDimController() {
        return new Controller<>(new TwoDimEnvWriter(),
                //new ConwayFieldLoader<>(GridCoordinates.LOADER),
                Environment::new);
    }

    /**
     * Creates a new controller that will used the given writer, to save and export fields, loader, to read
     * schemata from files, and rules to compute execution.
     *
     * @param writer             writer used to save fields on files.
     * @param environmentBuilder builder used to instantiate the environment.
     */
    public Controller(EnvironmentWriter<C, D> writer, Supplier<Environment<C, D>> environmentBuilder) {
        this.writer = writer;
        this.environmentBuilder = environmentBuilder;
        this.currentField = environmentBuilder.get();
    }

    /**
     * Writes the handled environment to the given file.
     *
     * @param file file on which we can save the environment.
     * @throws IOException if an I/O error occurs while writing the data.
     */
    public void save(File file) throws IOException {
        writer.writeTo(file, this.currentField);
    }

    /**
     * This method is used to reset the state of this controller.
     */
    public void reset() {
        this.currentField = environmentBuilder.get();
    }

    public void clear() {
        this.currentField = environmentBuilder.get();
    }
}
